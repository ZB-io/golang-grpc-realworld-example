// ********RoostGPT********
/*
Test generated by RoostGPT for test golang-grpc-realworld-example using AI Type Claude AI and AI Model claude-3-5-sonnet-20240620

ROOST_METHOD_HASH=GetComments_265127fb6a
ROOST_METHOD_SIG_HASH=GetComments_20efd5abae

FUNCTION_DEF=func (h *Handler) GetComments(ctx context.Context, req *pb.GetCommentsRequest) (*pb.CommentsResponse, error)
Based on the provided function and context, here are several test scenarios for the `GetComments` function:

```
Scenario 1: Successfully retrieve comments for a valid article

Details:
  Description: This test verifies that the function can successfully retrieve comments for a valid article when provided with a correct slug (article ID).
Execution:
  Arrange:
    - Set up a mock ArticleStore with a predefined article and its comments
    - Set up a mock UserStore with a current user and following information
    - Create a context with user authentication
    - Prepare a GetCommentsRequest with a valid slug
  Act:
    - Call GetComments with the prepared context and request
  Assert:
    - Verify that the returned CommentsResponse is not nil
    - Check that the number of comments in the response matches the expected count
    - Validate the content of each comment, including author information and following status
Validation:
  This test ensures the core functionality of retrieving comments works correctly under normal conditions. It's crucial for verifying that users can view comments on articles as expected.

Scenario 2: Attempt to retrieve comments with an invalid slug

Details:
  Description: This test checks the function's error handling when provided with an invalid slug that cannot be converted to an integer.
Execution:
  Arrange:
    - Prepare a GetCommentsRequest with an invalid slug (e.g., "not-a-number")
  Act:
    - Call GetComments with the prepared request
  Assert:
    - Verify that the function returns an error
    - Check that the error is of type codes.InvalidArgument
    - Ensure the error message indicates an invalid article ID
Validation:
  This test is important for ensuring proper input validation and error handling, preventing potential crashes or unexpected behavior when invalid data is provided.

Scenario 3: Attempt to retrieve comments for a non-existent article

Details:
  Description: This test verifies the function's behavior when a valid slug is provided, but it doesn't correspond to any existing article.
Execution:
  Arrange:
    - Set up a mock ArticleStore that returns an error when GetByID is called
    - Prepare a GetCommentsRequest with a valid but non-existent article ID
  Act:
    - Call GetComments with the prepared request
  Assert:
    - Verify that the function returns an error
    - Check that the error is of type codes.InvalidArgument
    - Ensure the error message indicates an invalid article ID
Validation:
  This test is crucial for handling cases where users might attempt to access comments for deleted or non-existent articles, ensuring proper error communication.

Scenario 4: Handle database error when retrieving comments

Details:
  Description: This test checks the function's error handling when there's a database error while retrieving comments.
Execution:
  Arrange:
    - Set up a mock ArticleStore that successfully returns an article but fails when GetComments is called
    - Prepare a GetCommentsRequest with a valid article ID
  Act:
    - Call GetComments with the prepared request
  Assert:
    - Verify that the function returns an error
    - Check that the error is of type codes.Aborted
    - Ensure the error message indicates a failure to get comments
Validation:
  This test is important for verifying the function's robustness in handling unexpected database errors, ensuring proper error propagation and logging.

Scenario 5: Retrieve comments with an authenticated user

Details:
  Description: This test verifies that the function correctly handles an authenticated user, including fetching their following status for comment authors.
Execution:
  Arrange:
    - Set up mock ArticleStore and UserStore with predefined data
    - Create a context with user authentication information
    - Prepare a GetCommentsRequest with a valid article ID
  Act:
    - Call GetComments with the prepared context and request
  Assert:
    - Verify that the returned CommentsResponse is not nil
    - Check that the author information in each comment includes the correct following status
Validation:
  This test ensures that the function correctly integrates user authentication and following status, which is crucial for providing personalized comment views.

Scenario 6: Handle error when retrieving current user information

Details:
  Description: This test checks the function's behavior when there's an error retrieving the current user's information.
Execution:
  Arrange:
    - Set up mock ArticleStore with valid article and comments
    - Set up mock UserStore that returns an error when GetByID is called for the current user
    - Create a context with user authentication information
    - Prepare a GetCommentsRequest with a valid article ID
  Act:
    - Call GetComments with the prepared context and request
  Assert:
    - Verify that the function returns an error
    - Check that the error is of type codes.NotFound
    - Ensure the error message indicates that the user was not found
Validation:
  This test is important for handling scenarios where user authentication succeeds but user data retrieval fails, ensuring proper error handling and preventing unauthorized access.

Scenario 7: Handle error when checking following status

Details:
  Description: This test verifies the function's error handling when there's an issue checking the following status between the current user and a comment author.
Execution:
  Arrange:
    - Set up mock ArticleStore with valid article and comments
    - Set up mock UserStore that returns an error when IsFollowing is called
    - Create a context with user authentication information
    - Prepare a GetCommentsRequest with a valid article ID
  Act:
    - Call GetComments with the prepared context and request
  Assert:
    - Verify that the function returns an error
    - Check that the error is of type codes.NotFound
    - Ensure the error message indicates an internal server error
Validation:
  This test ensures that the function handles errors in subsidiary operations gracefully, maintaining system integrity even when non-critical operations fail.
```

These scenarios cover various aspects of the `GetComments` function, including successful operations, input validation, error handling, and integration with authentication and following status. They address both normal use cases and potential edge cases or error conditions.
*/

// ********RoostGPT********
package handler

import (
	"context"
	"errors"
	"testing"

	"github.com/raahii/golang-grpc-realworld-example/auth"
	"github.com/raahii/golang-grpc-realworld-example/model"
	pb "github.com/raahii/golang-grpc-realworld-example/proto"
	"github.com/rs/zerolog"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

// MockArticleStore is a mock of ArticleStore
type MockArticleStore struct {
	mock.Mock
}

func (m *MockArticleStore) GetByID(id uint) (*model.Article, error) {
	args := m.Called(id)
	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*model.Article), args.Error(1)
}

func (m *MockArticleStore) GetComments(article *model.Article) ([]model.Comment, error) {
	args := m.Called(article)
	return args.Get(0).([]model.Comment), args.Error(1)
}

// MockUserStore is a mock of UserStore
type MockUserStore struct {
	mock.Mock
}

func (m *MockUserStore) GetByID(id uint) (*model.User, error) {
	args := m.Called(id)
	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*model.User), args.Error(1)
}

func (m *MockUserStore) IsFollowing(a *model.User, b *model.User) (bool, error) {
	args := m.Called(a, b)
	return args.Bool(0), args.Error(1)
}

func TestHandlerGetComments(t *testing.T) {
	tests := []struct {
		name           string
		setupMocks     func(*MockArticleStore, *MockUserStore)
		req            *pb.GetCommentsRequest
		ctx            context.Context
		expectedResp   *pb.CommentsResponse
		expectedErrMsg string
		expectedCode   codes.Code
	}{
		{
			name: "Successfully retrieve comments for a valid article",
			setupMocks: func(mas *MockArticleStore, mus *MockUserStore) {
				mas.On("GetByID", uint(1)).Return(&model.Article{ID: 1}, nil)
				mas.On("GetComments", mock.AnythingOfType("*model.Article")).Return([]model.Comment{
					{ID: 1, Body: "Comment 1", Author: model.User{ID: 1, Username: "user1"}},
					{ID: 2, Body: "Comment 2", Author: model.User{ID: 2, Username: "user2"}},
				}, nil)
				mus.On("GetByID", uint(1)).Return(&model.User{ID: 1}, nil)
				mus.On("IsFollowing", mock.AnythingOfType("*model.User"), mock.AnythingOfType("*model.User")).Return(false, nil)
			},
			req: &pb.GetCommentsRequest{Slug: "1"},
			ctx: auth.NewContext(context.Background(), uint(1)),
			expectedResp: &pb.CommentsResponse{
				Comments: []*pb.Comment{
					{Id: "1", Body: "Comment 1", Author: &pb.Profile{Username: "user1"}},
					{Id: "2", Body: "Comment 2", Author: &pb.Profile{Username: "user2"}},
				},
			},
		},
		{
			name:           "Attempt to retrieve comments with an invalid slug",
			setupMocks:     func(mas *MockArticleStore, mus *MockUserStore) {},
			req:            &pb.GetCommentsRequest{Slug: "invalid"},
			ctx:            context.Background(),
			expectedErrMsg: "invalid article id",
			expectedCode:   codes.InvalidArgument,
		},
		{
			name: "Attempt to retrieve comments for a non-existent article",
			setupMocks: func(mas *MockArticleStore, mus *MockUserStore) {
				mas.On("GetByID", uint(999)).Return(nil, errors.New("article not found"))
			},
			req:            &pb.GetCommentsRequest{Slug: "999"},
			ctx:            context.Background(),
			expectedErrMsg: "invalid article id",
			expectedCode:   codes.InvalidArgument,
		},
		{
			name: "Handle database error when retrieving comments",
			setupMocks: func(mas *MockArticleStore, mus *MockUserStore) {
				mas.On("GetByID", uint(1)).Return(&model.Article{ID: 1}, nil)
				mas.On("GetComments", mock.AnythingOfType("*model.Article")).Return(nil, errors.New("database error"))
			},
			req:            &pb.GetCommentsRequest{Slug: "1"},
			ctx:            context.Background(),
			expectedErrMsg: "failed to get comments",
			expectedCode:   codes.Aborted,
		},
		{
			name: "Handle error when retrieving current user information",
			setupMocks: func(mas *MockArticleStore, mus *MockUserStore) {
				mas.On("GetByID", uint(1)).Return(&model.Article{ID: 1}, nil)
				mas.On("GetComments", mock.AnythingOfType("*model.Article")).Return([]model.Comment{}, nil)
				mus.On("GetByID", uint(1)).Return(nil, errors.New("user not found"))
			},
			req:            &pb.GetCommentsRequest{Slug: "1"},
			ctx:            auth.NewContext(context.Background(), uint(1)),
			expectedErrMsg: "user not found",
			expectedCode:   codes.NotFound,
		},
		{
			name: "Handle error when checking following status",
			setupMocks: func(mas *MockArticleStore, mus *MockUserStore) {
				mas.On("GetByID", uint(1)).Return(&model.Article{ID: 1}, nil)
				mas.On("GetComments", mock.AnythingOfType("*model.Article")).Return([]model.Comment{
					{ID: 1, Body: "Comment 1", Author: model.User{ID: 2, Username: "user2"}},
				}, nil)
				mus.On("GetByID", uint(1)).Return(&model.User{ID: 1}, nil)
				mus.On("IsFollowing", mock.AnythingOfType("*model.User"), mock.AnythingOfType("*model.User")).Return(false, errors.New("database error"))
			},
			req:            &pb.GetCommentsRequest{Slug: "1"},
			ctx:            auth.NewContext(context.Background(), uint(1)),
			expectedErrMsg: "internal server error",
			expectedCode:   codes.NotFound,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			mockArticleStore := new(MockArticleStore)
			mockUserStore := new(MockUserStore)
			tt.setupMocks(mockArticleStore, mockUserStore)

			h := &Handler{
				logger: zerolog.Nop(),
				as:     mockArticleStore,
				us:     mockUserStore,
			}

			resp, err := h.GetComments(tt.ctx, tt.req)

			if tt.expectedErrMsg != "" {
				assert.Error(t, err)
				st, ok := status.FromError(err)
				assert.True(t, ok)
				assert.Equal(t, tt.expectedCode, st.Code())
				assert.Contains(t, st.Message(), tt.expectedErrMsg)
			} else {
				assert.NoError(t, err)
				assert.Equal(t, tt.expectedResp, resp)
			}

			mockArticleStore.AssertExpectations(t)
			mockUserStore.AssertExpectations(t)
		})
	}
}
