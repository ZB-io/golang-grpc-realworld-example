// ********RoostGPT********
/*
Test generated by RoostGPT for test golang-grpc-realworld-example using AI Type Vertex AI and AI Model claude-3-5-sonnet-v2

ROOST_METHOD_HASH=dsn_e202d1c4f9
ROOST_METHOD_SIG_HASH=dsn_b336e03d64

 tasked with writing test scenarios for the `dsn` function. Here are the test scenarios:

```
Scenario 1: Successfully Generate DSN String with Valid Environment Variables

Details:
  Description: Verify that the function correctly generates a DSN string when all required environment variables are properly set.
Execution:
  Arrange: 
    - Set all required environment variables (DB_HOST, DB_USER, DB_PASSWORD, DB_NAME, DB_PORT)
    - Expected DSN format: "user:password@(host:port)/dbname?charset=utf8mb4&parseTime=True&loc=Local"
  Act:
    - Call dsn() function
  Assert:
    - Verify returned DSN string matches expected format
    - Verify error is nil
Validation:
  This test ensures the core functionality of generating a valid database connection string works correctly.
  It's crucial for establishing database connections in the application.

Scenario 2: Missing DB_HOST Environment Variable

Details:
  Description: Verify that the function returns an appropriate error when DB_HOST environment variable is not set.
Execution:
  Arrange:
    - Clear DB_HOST environment variable
    - Set other required variables (DB_USER, DB_PASSWORD, DB_NAME, DB_PORT)
  Act:
    - Call dsn() function
  Assert:
    - Verify returned string is empty
    - Verify error message equals "$DB_HOST is not set"
Validation:
  Tests error handling for missing required configuration, ensuring proper feedback for misconfiguration.

Scenario 3: Missing DB_USER Environment Variable

Details:
  Description: Verify that the function returns an appropriate error when DB_USER environment variable is not set.
Execution:
  Arrange:
    - Set DB_HOST
    - Clear DB_USER environment variable
    - Set remaining variables (DB_PASSWORD, DB_NAME, DB_PORT)
  Act:
    - Call dsn() function
  Assert:
    - Verify returned string is empty
    - Verify error message equals "$DB_USER is not set"
Validation:
  Ensures proper error handling for missing database user credentials.

Scenario 4: Missing DB_PASSWORD Environment Variable

Details:
  Description: Verify that the function returns an appropriate error when DB_PASSWORD environment variable is not set.
Execution:
  Arrange:
    - Set DB_HOST, DB_USER
    - Clear DB_PASSWORD environment variable
    - Set remaining variables (DB_NAME, DB_PORT)
  Act:
    - Call dsn() function
  Assert:
    - Verify returned string is empty
    - Verify error message equals "$DB_PASSWORD is not set"
Validation:
  Validates security requirement that database password must be provided.

Scenario 5: Missing DB_NAME Environment Variable

Details:
  Description: Verify that the function returns an appropriate error when DB_NAME environment variable is not set.
Execution:
  Arrange:
    - Set DB_HOST, DB_USER, DB_PASSWORD
    - Clear DB_NAME environment variable
    - Set DB_PORT
  Act:
    - Call dsn() function
  Assert:
    - Verify returned string is empty
    - Verify error message equals "$DB_NAME is not set"
Validation:
  Ensures database name must be specified for connection string generation.

Scenario 6: Missing DB_PORT Environment Variable

Details:
  Description: Verify that the function returns an appropriate error when DB_PORT environment variable is not set.
Execution:
  Arrange:
    - Set DB_HOST, DB_USER, DB_PASSWORD, DB_NAME
    - Clear DB_PORT environment variable
  Act:
    - Call dsn() function
  Assert:
    - Verify returned string is empty
    - Verify error message equals "$DB_PORT is not set"
Validation:
  Validates that port specification is required for database connection.

Scenario 7: Special Characters in Environment Variables

Details:
  Description: Verify that the function correctly handles special characters in environment variables.
Execution:
  Arrange:
    - Set environment variables with special characters:
      DB_USER = "user@123"
      DB_PASSWORD = "pass#word!"
      DB_HOST = "host-name.com"
      DB_NAME = "test_db"
      DB_PORT = "3306"
  Act:
    - Call dsn() function
  Assert:
    - Verify returned DSN string correctly escapes/handles special characters
    - Verify error is nil
Validation:
  Ensures the function properly handles special characters in credentials and connection details,
  which is important for real-world usage scenarios.
```

These test scenarios cover:
1. Happy path with valid configuration
2. Error cases for each missing required environment variable
3. Special character handling in environment variables

Each scenario follows the Arrange-Act-Assert pattern and provides clear validation criteria. The scenarios are designed to ensure the function behaves correctly under various conditions and properly handles configuration errors.
*/

// ********RoostGPT********
package db

import (
    "os"
    "testing"
)

// TestData represents a test case structure for dsn function
type TestData struct {
    name     string
    envVars  map[string]string
    expected string
    errMsg   string
}

func TestDsn(t *testing.T) {
    // Save original environment variables to restore later
    originalEnv := map[string]string{
        "DB_HOST":     os.Getenv("DB_HOST"),
        "DB_USER":     os.Getenv("DB_USER"),
        "DB_PASSWORD": os.Getenv("DB_PASSWORD"),
        "DB_NAME":     os.Getenv("DB_NAME"),
        "DB_PORT":     os.Getenv("DB_PORT"),
    }

    // Cleanup function to restore environment after tests
    defer func() {
        for k, v := range originalEnv {
            if v == "" {
                os.Unsetenv(k)
            } else {
                os.Setenv(k, v)
            }
        }
    }()

    tests := []TestData{
        {
            name: "Success - Valid Environment Variables",
            envVars: map[string]string{
                "DB_HOST":     "localhost",
                "DB_USER":     "user",
                "DB_PASSWORD": "password",
                "DB_NAME":     "testdb",
                "DB_PORT":     "3306",
            },
            expected: "user:password@(localhost:3306)/testdb?charset=utf8mb4&parseTime=True&loc=Local",
            errMsg:   "",
        },
        {
            name: "Error - Missing DB_HOST",
            envVars: map[string]string{
                "DB_USER":     "user",
                "DB_PASSWORD": "password",
                "DB_NAME":     "testdb",
                "DB_PORT":     "3306",
            },
            expected: "",
            errMsg:   "$DB_HOST is not set",
        },
        {
            name: "Error - Missing DB_USER",
            envVars: map[string]string{
                "DB_HOST":     "localhost",
                "DB_PASSWORD": "password",
                "DB_NAME":     "testdb",
                "DB_PORT":     "3306",
            },
            expected: "",
            errMsg:   "$DB_USER is not set",
        },
        {
            name: "Error - Missing DB_PASSWORD",
            envVars: map[string]string{
                "DB_HOST": "localhost",
                "DB_USER": "user",
                "DB_NAME": "testdb",
                "DB_PORT": "3306",
            },
            expected: "",
            errMsg:   "$DB_PASSWORD is not set",
        },
        {
            name: "Error - Missing DB_NAME",
            envVars: map[string]string{
                "DB_HOST":     "localhost",
                "DB_USER":     "user",
                "DB_PASSWORD": "password",
                "DB_PORT":     "3306",
            },
            expected: "",
            errMsg:   "$DB_NAME is not set",
        },
        {
            name: "Error - Missing DB_PORT",
            envVars: map[string]string{
                "DB_HOST":     "localhost",
                "DB_USER":     "user",
                "DB_PASSWORD": "password",
                "DB_NAME":     "testdb",
            },
            expected: "",
            errMsg:   "$DB_PORT is not set",
        },
        {
            name: "Success - Special Characters in Environment Variables",
            envVars: map[string]string{
                "DB_HOST":     "host-name.com",
                "DB_USER":     "user@123",
                "DB_PASSWORD": "pass#word!",
                "DB_NAME":     "test_db",
                "DB_PORT":     "3306",
            },
            expected: "user@123:pass#word!@(host-name.com:3306)/test_db?charset=utf8mb4&parseTime=True&loc=Local",
            errMsg:   "",
        },
    }

    for _, tt := range tests {
        t.Run(tt.name, func(t *testing.T) {
            // Clear all environment variables first
            os.Clearenv()

            // Set environment variables for this test
            for k, v := range tt.envVars {
                os.Setenv(k, v)
            }

            // Execute the function
            got, err := dsn()

            // Verify results
            if tt.errMsg != "" {
                if err == nil {
                    t.Errorf("expected error %q, got nil", tt.errMsg)
                } else if err.Error() != tt.errMsg {
                    t.Errorf("expected error %q, got %q", tt.errMsg, err.Error())
                }
            } else {
                if err != nil {
                    t.Errorf("unexpected error: %v", err)
                }
            }

            if got != tt.expected {
                t.Errorf("expected %q, got %q", tt.expected, got)
            }
        })
    }
}
