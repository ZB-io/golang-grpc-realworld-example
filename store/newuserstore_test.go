// ********RoostGPT********
/*
Test generated by RoostGPT for test go-grpc-client using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=NewUserStore_3201cf334b
ROOST_METHOD_SIG_HASH=NewUserStore_4f0c2dfca9

Scenario 01: Successful Creation of a New User Store

Details:
  Description: The test is meant to check if a New UserStore instance is correctly generated. The main aim is to ensure the function initializes the store correctly when a valid db object is passed. 

Execution:
  Arrange: This involves creating an instance of a gorm.DB object. The gorm.DB object could be a mock object whose structure matches the structure expected by the function under test.
  Act: The function "NewUserStore" is then invoked, providing the created db object as an argument.
  Assert: Using Go's testing facilities, assert that the function does not return nil and the `db` field of the return value matches the provided db object.

Validation:
  The assertion ensures that the function is correctly initiating the UserStore and attaching the right db object to it. This test is crucial to ensure that a new UserStore creation process works as expected.

Scenario 02: NewUserStore Called With Nil DB

Details:
  Description: This test checks the function behavior when a nil db object is passed as a parameter. 

Execution:
  Arrange: No special arrangement is needed since we're working with a nil db object.
  Act: Call "NewUserStore" function with a nil parameter.
  Assert: Verify that the returned UserStore is not nil, but its `db` field is nil.

Validation:
  Although passing a nil db object might not be a usual occurrence, ensuring that the function can handle such edge cases might be helpful to prevent unexpected issues. The test ensures that the function doesn't crash when a nil db is passed and that it correctly reflects the nil db in its return value.

Scenario 03: Passing a Mock DB Object With Preloaded Values

Details:
  Description: This test is designed to check if the function handles values preloaded in a mock DB object correctly.

Execution:
  Arrange: Set up a gorm.DB object with some preloaded values.
  Act: Invoke "NewUserStore" with the mock object.
  Assert: Check that the returned UserStore is not nil, and the `db` field of the UserStore is equivalent to the mock db object passed in.

Validation:
  This test scenario ensures that pre-existing values in a db object does not affect the creation of a New UserStore. It's warranted to affirm the creation process does not mutate or discard any preloaded values.
*/

// ********RoostGPT********
package store

import (
	"testing"
	"github.com/jinzhu/gorm"
	"github.com/stretchr/testify/assert"
)

func TestNewUserStore(t *testing.T) {
    db := &gorm.DB{}
    us := NewUserStore(db)
    assert.NotNil(t, us)
}
