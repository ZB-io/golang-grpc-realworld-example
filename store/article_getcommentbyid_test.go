// ********RoostGPT********
/*
Test generated by RoostGPT for test go-deep using AI Type Open Source AI and AI Model meta-llama/Llama-2-13b-chat

ROOST_METHOD_HASH=GetCommentByID_4bc82104a6
ROOST_METHOD_SIG_HASH=GetCommentByID_333cab101b

FUNCTION_DEF=func (s *ArticleStore) GetCommentByID(id uint) (*model.Comment, error) 

*/

// ********RoostGPT********


package github.com/raahii/golang-grpc-realworld-example/store

import (
	"errors"
	"testing"
	"github.com/DATA-DOG/go-sqlmock"
	"github.com/jinzhu/gorm"
	"github.com/raahii/golang-grpc-realworld-example/model"
	"github.com/stretchr/testify/assert"
)







func TestArticleStoreGetCommentById(t *testing.T) {

	testCases := []struct {
		name            string
		commentID       uint
		mockDBSetup     func(mock sqlmock.Sqlmock)
		expectedError   error
		expectedComment *model.Comment
	}{
		{
			name:      "Success - Comment Found",
			commentID: 1,
			mockDBSetup: func(mock sqlmock.Sqlmock) {
				rows := sqlmock.NewRows([]string{"id", "body", "user_id", "article_id"}).
					AddRow(1, "Test Comment", 1, 1)
				mock.ExpectQuery("SELECT \\* FROM \"comments\" WHERE \"comments\".\"deleted_at\" IS NULL AND \\(\\(\"comments\".\"id\" = \\?\\)\\)").
					WithArgs(1).
					WillReturnRows(rows)
			},
			expectedError: nil,
			expectedComment: &model.Comment{
				Model:     gorm.Model{ID: 1},
				Body:      "Test Comment",
				UserID:    1,
				ArticleID: 1,
			},
		},
		{
			name:      "Failure - Comment Not Found",
			commentID: 2,
			mockDBSetup: func(mock sqlmock.Sqlmock) {
				mock.ExpectQuery("SELECT \\* FROM \"comments\" WHERE \"comments\".\"deleted_at\" IS NULL AND \\(\\(\"comments\".\"id\" = \\?\\)\\)").
					WithArgs(2).
					WillReturnError(gorm.ErrRecordNotFound)
			},
			expectedError:   gorm.ErrRecordNotFound,
			expectedComment: nil,
		},
		{
			name:      "Failure - Database Error",
			commentID: 3,
			mockDBSetup: func(mock sqlmock.Sqlmock) {
				mock.ExpectQuery("SELECT \\* FROM \"comments\" WHERE \"comments\".\"deleted_at\" IS NULL AND \\(\\(\"comments\".\"id\" = \\?\\)\\)").
					WithArgs(3).
					WillReturnError(errors.New("database error"))
			},
			expectedError:   errors.New("database error"),
			expectedComment: nil,
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {

			db, mock, err := sqlmock.New()
			if err != nil {
				t.Fatalf("an error '%s' was not expected when opening a stub database connection", err)
			}
			defer db.Close()

			gormDB, err := gorm.Open("postgres", db)
			if err != nil {
				t.Fatalf("an error '%s' was not expected when opening a gorm database connection", err)
			}

			tc.mockDBSetup(mock)

			store := &ArticleStore{db: gormDB}

			comment, err := store.GetCommentByID(tc.commentID)

			if tc.expectedError != nil {
				assert.Equal(t, tc.expectedError, err, "Error should match expected error")
			} else {
				assert.NoError(t, err, "Expected no error")
			}

			if tc.expectedComment != nil {
				assert.Equal(t, tc.expectedComment.ID, comment.ID, "Comment ID should match")
				assert.Equal(t, tc.expectedComment.Body, comment.Body, "Comment Body should match")
				assert.Equal(t, tc.expectedComment.UserID, comment.UserID, "Comment UserID should match")
				assert.Equal(t, tc.expectedComment.ArticleID, comment.ArticleID, "Comment ArticleID should match")
			} else {
				assert.Nil(t, comment, "Comment should be nil")
			}

			if err := mock.ExpectationsWereMet(); err != nil {
				t.Errorf("there were unfulfilled expectations: %s", err)
			}
		})
	}
}
